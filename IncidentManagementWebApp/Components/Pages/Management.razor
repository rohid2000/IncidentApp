@page "/management"
@using IncidentManagementWebApp.Interfaces
@using IncidentManagementWebApp.Services
@inject HttpClient Http
@inject UserStateService UserStateService

@if (Incidents.Count > 0)
{
    <select @onchange="(e) => SetSortOption(e)">
        <option value=""></option>
        <option value="Prioriteit">Prioriteit hoog</option>
        <option value="Status">Status Gemeld</option>
    </select>
    <table>
        <thead>
            <tr>
                <th>Beschrijving</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Gebruikersnaam</th>
                <th>Locatie</th>
            </tr>
        </thead>
        <tbody>
            @if (!this.isLoading)
            {
                @foreach (IIncident incident in Incidents)
                {
                    <tr>
                        <td>@incident.Description</td>
                        <td>
                            <select value="@incident.Status" @onchange="(e) => UpdateIncidentStatus(e, incident)">
                                <option value=""></option>
                                <option value="Geregistreerd">Geregistreerd</option>
                                <option value="In behandeling">In behandeling</option>
                                <option value="Afgehandeld">Afgehandeld</option>
                            </select>
                        </td>
                        <td>
                            <select value="@incident.Priority" @onchange="(e) => UpdateIncidentPriority(e, incident)">
                                <option value=""></option>
                                <option value="Hoog">Hoog</option>
                                <option value="Normaal">Normaal</option>
                                <option value="Laag">Laag</option>
                            </select>
                        </td>
                        <td>@incident.Username</td>
                        <td>@incident.Location</td>
                        <td>
                            <button @onclick="() => DeleteIncident(incident)">Verwijderen</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <h4>Er zijn geen gemelde incidenten!</h4>
}

@code {
    bool isLoading = true;
    string currentUser;
    List<IIncident> Incidents = new List<IIncident>();
    PatchIncidentBody[] PatchIncidentBody;

    protected override async Task OnInitializedAsync()
    {
        currentUser = UserStateService.currentUser.username;

        await GetAllReportedIncidents();

        await base.OnInitializedAsync();
    }

    private async Task SetSortOption(ChangeEventArgs args) {
        switch(args.Value) {
            case "Prioriteit":
                await this.SortIncidentsByPriority();
                break;
            case "Status":
                await this.SortIncidentsByStatus();
                break;
            default:
                await this.GetAllReportedIncidents();
                break;
        }
    }

    //toDo: make priority and status an enum,

    private async Task SortIncidentsByPriority() {
        Incidents = Incidents.OrderByDescending(i => i.Priority).ToList();
    }

    private async Task SortIncidentsByStatus() {
        Incidents = Incidents.OrderByDescending(i => i.Status).ToList();
    }

    private async Task GetAllReportedIncidents()
    {
        try
        {
            // Call your API endpoint
            var response = await Http.PostAsJsonAsync("https://localhost:7015/api/incident/getAll", new { username = currentUser });

            if (response.IsSuccessStatusCode)
            {
                // Handle successful login (e.g., store token, redirect)

                IIncident[] incidents = await response.Content.ReadFromJsonAsync<IIncident[]>();

                this.Incidents.Clear();
                this.Incidents = incidents.ToList();
                this.isLoading = false;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Could not fetch Incidents");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateIncidentStatus(ChangeEventArgs args, IIncident incident)
    {
        try
        {
            var body = new PatchIncidentBody
            {
                Status = args.Value.ToString(),
                Priority = incident.Priority
            };

            var response = await Http.PatchAsJsonAsync("https://localhost:7015/api/incident/" + incident.Id, body);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateIncidentPriority(ChangeEventArgs args, IIncident incident)
    {
        try
        {
            var body = new PatchIncidentBody
                {
                    Status = incident.Status,
                    Priority = args.Value.ToString()
                };

            var response = await Http.PatchAsJsonAsync("https://localhost:7015/api/incident/" + incident.Id, body);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteIncident(IIncident incident)
    {
        try
        {
            var response = await Http.DeleteAsync("https://localhost:7015/api/Incident/" + incident.Id);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
