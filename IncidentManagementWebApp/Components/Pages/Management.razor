@page "/management"
@using IncidentManagementWebApp.Interfaces
@using IncidentManagementWebApp.Services
@inject HttpClient Http
@inject UserStateService UserStateService

@if (Incidents.Length > 0)
{
    <table>
        <thead>
            <tr>
                <th>Description</th>
                <th>Status</th>
                <th>Priority</th>
                <th>Username</th>
                <th>Location</th>
            </tr>
        </thead>
        <tbody>
            @if (!this.isLoading)
            {
                @foreach (IIncident incident in Incidents)
                {
                    <tr>
                        <td>@incident.Description</td>
                        <td>
                            <select value="@incident.Status" @onchange="(e) => UpdateIncidentStatus(e, incident)">
                                <option value=""></option>
                                <option value="registered">Geregistreerd</option>
                                <option value="pending">In behandeling</option>
                                <option value="completed">Afgehandeld</option>
                            </select>
                        </td>
                        <td>
                            <select value="@incident.Priority" @onchange="(e) => UpdateIncidentPriority(e, incident)">
                                <option value=""></option>
                                <option value="High">Hoog</option>
                                <option value="Normal">Normaal</option>
                                <option value="Low">Laag</option>
                            </select>
                        </td>
                        <td>@incident.Username</td>
                        <td>@incident.Location</td>
                        <td>
                            <button @onclick="() => DeleteIncident(incident)">Delete</button>
                        </td>
                    </tr>
                }
            }
        </tbody>
    </table>
}
else
{
    <h4>There are no reported Incidents!</h4>
}

@code {
    bool isLoading = true;
    string currentUser;
    IIncident[] Incidents = [];
    PatchIncidentBody[] PatchIncidentBody;

    protected override async Task OnInitializedAsync()
    {
        currentUser = UserStateService.currentUser.username;

        await GetAllReportedIncidents();

        await base.OnInitializedAsync();
    }

    private async Task GetAllReportedIncidents()
    {
        try
        {
            // Call your API endpoint
            var response = await Http.PostAsJsonAsync("https://localhost:7015/api/incident/getAll", new { username = currentUser });

            if (response.IsSuccessStatusCode)
            {
                // Handle successful login (e.g., store token, redirect)

                IIncident[] incidents = await response.Content.ReadFromJsonAsync<IIncident[]>();

                this.Incidents = incidents;
                this.isLoading = false;
                StateHasChanged();
            }
            else
            {
                Console.WriteLine("Could not fetch Incidents");
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateIncidentStatus(ChangeEventArgs args, IIncident incident)
    {
        try
        {
            var body = new PatchIncidentBody
            {
                Status = args.Value.ToString(),
                Priority = incident.Priority
            };

            var response = await Http.PatchAsJsonAsync("https://localhost:7015/api/incident/" + incident.Id, body);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task UpdateIncidentPriority(ChangeEventArgs args, IIncident incident)
    {
        try
        {
            var body = new PatchIncidentBody
                {
                    Status = incident.Status,
                    Priority = args.Value.ToString()
                };

            var response = await Http.PatchAsJsonAsync("https://localhost:7015/api/incident/" + incident.Id, body);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }

    private async Task DeleteIncident(IIncident incident)
    {
        try
        {
            var response = await Http.DeleteAsync("https://localhost:7015/api/Incident/" + incident.Id);

            if (response.IsSuccessStatusCode)
            {
                await GetAllReportedIncidents();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex);
        }
    }
}
